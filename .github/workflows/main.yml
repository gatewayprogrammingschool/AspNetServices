name: Packages

on:
  release:
    types: [released]
  push:
    branches: [ main, release/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
    PLATFORM: x64

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Event
      env:
        event_name: ${{ github.event_name }}
      run: echo "event_name $event_name"
    - if: ${{ github.event_name == 'release' }}
      run: echo 'Setting Release.'
      env:
        CONFIG: Release
    - if: ${{ github.event_name != 'release' }}
      run: echo 'Setting Debug.'
      env:
        CONFIG: Debug
    - name: Checkout
      uses: actions/checkout@v1
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.202

    - name: Setup GitVersion
      run: |
        export PATH="${PATH}:$HOME/.dotnet/tools/"
        #if [ ! -f $HOME/.dotnet/tools/pwsh ]; then
        #    echo 'Installing PowerShell'
        #    dotnet tool install powershell -g;
        #fi;
        if [ ! -f $HOME/.dotnet/tools/dotnet-gitversion ]; then
            echo 'Installing GitVersion'
            dotnet tool install gitversion.tool -g;
        fi;
        $HOME/.dotnet/tools/dotnet-gitversion;

    - name: Build ASP.Net Services
      env:
        PLATFORM: ${{ env.PLATFORM }}
      run: |
        event_name="${{ github.event_name }}"
        if [ $event_name == 'release' ]; then
          CONFIG='Release'
        else
          CONFIG='Debug'
        fi;
        ws="${{ github.workspace }}"
        echo "\$ws - $ws"
        outPath="${ws}/packages"
        if [ -d $outPath ]; then
            rm $outPath -r -f;
        fi;
        mkdir $outPath;

        cd ${ws}/submodules/ColorCodePortable/MDS.ColorCodePortable
        rm "./bin" -r -f
        dotnet restore --source "https://api.nuget.org/v3/index.json";
        dotnet build -c ${CONFIG} -a ${PLATFORM} --no-restore
        dotnet pack -c ${CONFIG} --no-build --include-source --include-symbols --force
        cd "./bin/${PLATFORM}/${CONFIG}"
        cp -r *.symbols.nupkg $outPath

        cd "${ws}/submodules/Markdig.SyntaxHighlighting/src/MDS.Markdig.SyntaxHighlighting"
        rm "./bin" -r -f
        dotnet restore --source "https://api.nuget.org/v3/index.json";
        dotnet build -c ${CONFIG} -a ${PLATFORM} --no-restore
        dotnet pack -c ${CONFIG} --no-build --include-source --include-symbols --force
        cd "./bin/${PLATFORM}/${CONFIG}"
        cp -r *.symbols.nupkg $outPath

        cd "${ws}/src/MDS.AspnetServices"
        rm "./bin" -r -f
        dotnet restore --source "https://api.nuget.org/v3/index.json";
        dotnet build -c ${CONFIG} -a ${PLATFORM} --no-restore
        dotnet pack -c ${CONFIG} --no-build --include-source --include-symbols --force
        cd "./bin/${PLATFORM}/${CONFIG}"
        cp -r *.symbols.nupkg $outPath

        cd "${ws}/src/MDS.AppFramework/"
        rm "./bin" -r -f
        dotnet restore --source "https://api.nuget.org/v3/index.json";
        dotnet build -c ${CONFIG} -a ${PLATFORM} --no-restore
        dotnet pack -c ${CONFIG} --no-build --include-source --include-symbols --force
        cd "./bin/${PLATFORM}/${CONFIG}"
        cp -r *.symbols.nupkg $outPath
        ls -al $outPath

    - name: GitHub Packages - ColorCode Symbols
      if: ${{ github.event_name != 'release' }}
      uses: tanaka-takayoshi/nuget-publish-to-github-packages-action@v2.1
      with:
        # Path of NuPkg
        nupkg-path: ${{ github.workspace }}/packages/MDS.MarkdownServer.ColorCodePortable.${{ env.GitVersion_SemVer }}.symbols.nupkg
        # package repository owner
        repo-owner: MarkdownServer
        # user account
        gh-user: sharpninja
        # access token
        token: ${{ secrets.PIPELINE_TOKEN }}
        # skip publishing duplicated package(s)
        skip-duplicate: true

    - name: GitHub Packages - Markdig.SyntaxHighlighting Symbols
      if: ${{ github.event_name != 'release' }}
      uses: tanaka-takayoshi/nuget-publish-to-github-packages-action@v2.1
      with:
        # Path of NuPkg
        nupkg-path: ${{ github.workspace }}/packages/MarkdownServer.Markdig.SyntaxHighlighting.${{ env.GitVersion_SemVer }}.symbols.nupkg
        # package repository owner
        repo-owner: MarkdownServer
        # user account
        gh-user: sharpninja
        # access token
        token: ${{ secrets.PIPELINE_TOKEN }}
        # skip publishing duplicated package(s)
        skip-duplicate: true

    - name: GitHub Packages - App Server Symbols
      if: ${{ github.event_name != 'release' }}
      uses: tanaka-takayoshi/nuget-publish-to-github-packages-action@v2.1
      with:
        # Path of NuPkg
        nupkg-path: ${{ github.workspace }}/packages/MDS.MarkdownServer.${{ env.GitVersion_SemVer }}.symbols.nupkg
        # package repository owner
        repo-owner: MarkdownServer
        # user account
        gh-user: sharpninja
        # access token
        token: ${{ secrets.PIPELINE_TOKEN }}
        # skip publishing duplicated package(s)
        skip-duplicate: true

    - name: GitHub Packages - App Framework Symbols
      if: ${{ github.event_name != 'release' }}
      uses: tanaka-takayoshi/nuget-publish-to-github-packages-action@v2.1
      with:
        # Path of NuPkg
        nupkg-path: ${{ github.workspace }}/packages/MDS.MarkdownServer.ApplicationFramework.${{ env.GitVersion_SemVer }}.symbols.nupkg
        # package repository owner
        repo-owner: MarkdownServer
        # user account
        gh-user: sharpninja
        # access token
        token: ${{ secrets.PIPELINE_TOKEN }}
        # skip publishing duplicated package(s)
        skip-duplicate: true

    - name: Nuget Publish
      if: ${{ github.event_name == 'release' }}
      run: |
        $symbolPackages = gci ${{ github.workspace }}/packages/*.${{ env.GitVersion_SemVer }}.symbols.nupkg -ErrorAction Stop

        $symbolPackages | forEach-Object -process {
          dotnet nuget push $_ -k "${{ secrets.NUGET_KEY }}" -s https://api.nuget.org/v3/index.json --skip-duplicate
        }
